trigger:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
  - stage: LighthousePerformanceTests
    displayName: 'Lighthouse Performance Testing'
    jobs:
      - job: RunLighthouseTests
        displayName: 'Run Lighthouse Performance Tests'
        timeoutInMinutes: 30

        steps:
          # Install Java 17
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          # Cache Maven Dependencies
          - task: Cache@2
            displayName: 'Cache Maven Dependencies'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)

          # Download Maven Dependencies
          - task: Maven@4
            displayName: 'Download Maven Dependencies'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'dependency:resolve'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          # Compile Project
          - task: Maven@4
            displayName: 'Compile Project'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'compile test-compile'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          # Run Tests with TestNG XML
          - task: Maven@4
            displayName: 'Run Tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean test'
              options: '$(MAVEN_OPTS) -DforkCount=1 -DreuseForks=false -DsuiteXmlFile=testng.xml -Dallure.results.directory=target/allure-results'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          # Debug: Check test results
          - script: |
              echo "=== Maven test results ==="
              if [ -d "target/surefire-reports" ]; then
                echo "Surefire reports exist:"
                ls -la target/surefire-reports/
                echo "=== TestNG Results ==="
                find target/surefire-reports -name "*.xml" -exec echo "Found: {}" \; -exec grep -c "test " {} \;
              else
                echo "No surefire reports found"
              fi
              echo "=== Allure results ==="
              if [ -d "target/allure-results" ]; then
                echo "Allure results exist:"
                ls -la target/allure-results/
                echo "Allure files count:"
                find target/allure-results -type f | wc -l
              else
                echo "No allure-results found"
              fi
            displayName: 'Debug: Check Test Results'
            condition: always()

          # Generate Allure Report from Allure results
          - script: |
              if [ -d "$(Build.SourcesDirectory)/target/allure-results" ]; then
                npm install -g allure-commandline
                allure generate $(Build.SourcesDirectory)/target/allure-results --clean -o $(Build.ArtifactStagingDirectory)/allure-results
                echo "Allure report generated successfully"
              else
                echo "No allure-results directory found, skipping report generation"
                mkdir -p $(Build.ArtifactStagingDirectory)/allure-results
                echo "No test results available" > $(Build.ArtifactStagingDirectory)/allure-results/no-results.txt
              fi
            displayName: 'Generate Allure Report'
            condition: always()

          # Publish Allure Report Artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Report'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/allure-results'
              artifactName: 'allure-report'
              publishLocation: 'pipeline'
            condition: always()

          # Publish Allure Report using the Azure DevOps extension
          - task: PublishAllureReport@1
            displayName: 'Publish Allure Report to Azure DevOps'
            inputs:
              allureVersion: '2.27.0'
              testResultsDir: '$(Build.SourcesDirectory)/target/allure-results'
            condition: always()
            continueOnError: true