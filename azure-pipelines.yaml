trigger:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -Xmx2048m -XX:MaxPermSize=512m'

stages:
  - stage: TestExecution
    displayName: 'Test Execution'
    jobs:
      - job: RunTests
        displayName: 'Run Tests'
        timeoutInMinutes: 45

        steps:
          # Install Node.js
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '18.x'

          # Install Java 17
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          # Cache Maven Dependencies
          - task: Cache@2
            displayName: 'Cache Maven Dependencies'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)

          # Clean and compile first
          - task: Maven@4
            displayName: 'Clean and Compile'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean compile'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
            timeoutInMinutes: 10

          # Compile test classes
          - task: Maven@4
            displayName: 'Compile Test Classes'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test-compile'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
            timeoutInMinutes: 10

          # Debug: Check compiled classes
          - script: |
              echo "=== Checking compiled test classes ==="
              if [ -d "target/test-classes" ]; then
                echo "Test classes found:"
                find target/test-classes -name "*.class" -type f
                echo "=== Checking for LighthouseTests class specifically ==="
                if [ -f "target/test-classes/ge/tbc/testautomation/LighthouseTests.class" ]; then
                  echo "✓ LighthouseTests.class found"
                else
                  echo "✗ LighthouseTests.class NOT found"
                fi
              else
                echo "No test-classes directory found!"
              fi
              echo "=== TestNG XML file ==="
              if [ -f "testng.xml" ]; then
                echo "testng.xml content:"
                cat testng.xml
              else
                echo "testng.xml not found"
              fi
            displayName: 'Debug: Check Compiled Classes'

          # Try running a simple test first without any special configurations
          - script: |
              echo "=== Running Maven test with minimal configuration ==="
              mvn test -Dtest=ge.tbc.testautomation.LighthouseTests -DfailIfNoTests=false -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -q
              echo "Maven exit code: $?"
            displayName: 'Simple Maven Test Run'
            timeoutInMinutes: 20
            continueOnError: true

          # Check what happened after the simple test run
          - script: |
              echo "=== After simple test run ==="
              if [ -d "target/surefire-reports" ]; then
                echo "Surefire reports created:"
                ls -la target/surefire-reports/
                echo "=== Content of XML files ==="
                find target/surefire-reports -name "*.xml" -exec echo "=== {} ===" \; -exec cat {} \;
              else
                echo "No surefire-reports directory created"
              fi
              
              if [ -d "target/allure-results" ]; then
                echo "Allure results created:"
                ls -la target/allure-results/
              else
                echo "No allure-results directory created"
              fi
              
              echo "=== Maven logs ==="
              if [ -f "target/surefire-reports/TEST-ge.tbc.testautomation.LighthouseTests.xml" ]; then
                echo "Test results found!"
                cat target/surefire-reports/TEST-ge.tbc.testautomation.LighthouseTests.xml
              fi
            displayName: 'Check Simple Test Results'
            condition: always()

          # If simple test worked, try with Allure
          - task: Maven@4
            displayName: 'Run Tests with Allure'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '$(MAVEN_OPTS) -Dtest=ge.tbc.testautomation.LighthouseTests -Dallure.results.directory=target/allure-results -DfailIfNoTests=false'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
            timeoutInMinutes: 20
            condition: succeededOrFailed()

          # Final check of all results
          - script: |
              echo "=== Final Results Check ==="
              echo "Target directory:"
              ls -la target/ || echo "No target directory"
              
              echo "=== Surefire Reports ==="
              if [ -d "target/surefire-reports" ]; then
                ls -la target/surefire-reports/
                echo "=== Test Results Summary ==="
                find target/surefire-reports -name "*.xml" -exec grep -l "testcase" {} \; || echo "No test cases found in XML"
              else
                echo "No surefire-reports"
              fi
              
              echo "=== Allure Results ==="
              if [ -d "target/allure-results" ]; then
                ls -la target/allure-results/
                echo "Files count: $(find target/allure-results -type f | wc -l)"
              else
                echo "No allure-results"
              fi
            displayName: 'Final Results Check'
            condition: always()

          # Publish Test Results if they exist
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              failTaskOnFailedTests: false
              mergeTestResults: true
            condition: always()

          # Generate Allure Report if results exist
          - script: |
              if [ -d "target/allure-results" ] && [ "$(find target/allure-results -type f | wc -l)" -gt 0 ]; then
                echo "Generating Allure report..."
                npm install -g allure-commandline
                allure generate target/allure-results --clean -o $(Build.ArtifactStagingDirectory)/allure-report
                echo "Allure report generated"
              else
                echo "No Allure results to process"
                mkdir -p $(Build.ArtifactStagingDirectory)/allure-report
                echo "No test results available" > $(Build.ArtifactStagingDirectory)/allure-report/no-results.txt
              fi
            displayName: 'Generate Allure Report'
            condition: always()

          # Publish Allure Report
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Report Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/allure-report'
              artifactName: 'allure-report'
              publishLocation: 'pipeline'
            condition: always()