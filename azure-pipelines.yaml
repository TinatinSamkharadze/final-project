trigger:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
  - stage: LighthousePerformanceTests
    displayName: 'Lighthouse Performance Testing'
    jobs:
      - job: RunLighthouseTests
        displayName: 'Run Lighthouse Performance Tests'
        timeoutInMinutes: 30

        steps:
          # Install Node.js
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '18.x'

          # Install Lighthouse CLI
          - script: |
              npm install -g lighthouse
              lighthouse --version
            displayName: 'Install Lighthouse CLI'

          # Install Chrome Browser
          - script: |
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable
              google-chrome --version
            displayName: 'Install Chrome Browser'

          # Install Java 17
          - task: JavaToolInstaller@0
            displayName: 'Install Java 17'
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          # Cache Maven Dependencies
          - task: Cache@2
            displayName: 'Cache Maven Dependencies'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)

          # Download Maven Dependencies
          - task: Maven@4
            displayName: 'Download Maven Dependencies'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'dependency:resolve'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          # Create Lighthouse Reports Directory
          - script: |
              mkdir -p lighthouse-reports
              chmod 755 lighthouse-reports
            displayName: 'Create Lighthouse Reports Directory'

          # Compile Project
          - task: Maven@4
            displayName: 'Compile Project'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'compile test-compile'
              options: '$(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'

          # Run Lighthouse Performance Tests (via Maven)
          - task: Maven@4
            displayName: 'Run Lighthouse Performance Tests'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              options: '-Dtest=ge.tbc.testautomation.LighthouseTests $(MAVEN_OPTS) -Dheadless=true -DforkCount=1 -DreuseForks=false'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.17'
            env:
              CI: 'true'
              LIGHTHOUSE_PATH: 'lighthouse'
              CHROME_PATH: '/usr/bin/google-chrome'
              DISPLAY: ':99'
              PLAYWRIGHT_BROWSERS_PATH: '0'

          # Publish Test Results
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: 'JUnit' # If you still want JUnit format
              testResultsFiles: '**/target/allure-results/*.xml'  # Ensure the Allure results XML files are present
              failTaskOnFailedTests: true
              testRunTitle: 'Lighthouse Performance Tests'
            condition: always()

          # Publish Lighthouse Reports Artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Lighthouse Reports'
            inputs:
              pathToPublish: 'lighthouse-reports'
              artifactName: 'lighthouse-reports'
              publishLocation: 'Container'
            condition: always()

          # Generate Allure Report
          - script: |
              if [ -d "$(Build.SourcesDirectory)/target/allure-results" ]; then
                npm install -g allure-commandline
                allure generate $(Build.SourcesDirectory)/target/allure-results --clean -o $(Build.ArtifactStagingDirectory)/allure-results
                allure addAttachment 'Lighthouse Report' 'text/html' lighthouse-reports/* --fileType html
                echo "Allure report generated successfully"
              else
                echo "No allure-results directory found, skipping report generation"
                mkdir -p $(Build.ArtifactStagingDirectory)/allure-results
                echo "No test results available" > $(Build.ArtifactStagingDirectory)/allure-results/index.html
              fi
            displayName: 'Generate Allure Report'
            condition: always()

          # List Contents of Allure Results Directory for Debugging
          - script: |
              echo "Listing contents of allure-results directory"
              ls -R $(Build.ArtifactStagingDirectory)/allure-results
            displayName: 'List Contents of Allure Results Directory'
            condition: always()

          # Publish Allure Report Artifact
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Allure Report'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/allure-results'
              artifactName: 'allure-report'
              publishLocation: 'pipeline'
            condition: always()

          # Publish Allure Report using the Azure DevOps extension
          - task: PublishAllureReport@1
            displayName: 'Publish Allure Report to Azure DevOps'
            inputs:
              allureVersion: '2.27.0'
              testResultsDir: '$(Build.ArtifactStagingDirectory)/allure-results'
            condition: always()
